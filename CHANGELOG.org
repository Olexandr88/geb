* 0.5.1
** Bug fix patch
- =mgl-pax= updated on us causing build failures
- Fix bug where the optimized Vampir output would produce incorrect
  code
* 0.5.0

** User Facing Changes
- Natural Numbers have been added to the pipeline, from lambda down to
  vampir generation
  + Added =modulo= logic down the pipeline as well
- The Lambda Pipeline into Geb now Assumes =24= bits of precision
- We now have a new intermediate layer, the =seqn= layer replaces the
  =bitc= layer as the default, hopefully ending in more optimal code
- Made some optimization passes to the vampir backend, along with
  breaking those changes into passes
- Improved optional value compilation from the lambda level
** Internal Changes
- Moved the following generic functions to the generic package
  + =so-eval=
  + =width=
  + =so-hom=obj=
** Bug fix
- Fixed a bug where =obj-equalp= would compute equality incorrectly
* 0.4.1
** Bug fix patch
- Previously we used =asdf:system-version= which is not defined in
  older asdf versions, thus we have moved it to the more common
  =asdf:component-version=
* 0.4.0
** User Facing Changes
- _Binary_
  + Binary now has a =-v= flag for version
  + the old vampir =-v= has been moved to =-p=
- _GUI_
  + The gui can now generate out =svg= files, read the docs to find
    out more!
- _Libraries_
  + The tri module has been moved to the =geb-decision= module, with
    properly exported functions
** Internal changes
- There is now a maintainers guide.
- Documentation has been fixed to recreate the old behavior of
  mgl-pax. More can be read [[https://github.com/melisgl/mgl-pax/issues/30][here]].
- More testing of BITC.
- Better Vampir generation
  + Namely we can generate lists and exponentials
* 0.3.2-1
- Revision fixup
  + MGL-pax had a regression where @documentation is not exported, we
    work around this by exporting every library, this issue can be
    tracked [[https://github.com/melisgl/mgl-pax/issues/30][here]].
* 0.3.2
** User Facing Changes
- _Lambda Changes_
  - Added an error node so that users can express failure
    + This is translated into a maybe type internally for now, and
      affects the compilation downwards.
** Bug Fixes
- =Gapply= (the interpreter) now works correctly for the BITC in the
  =SWAP= case.
- Fix an issue where higher order functions in the Lambda frontend
  would generate incorrect logic when extracting to the core category
*** Internal
- The pipeline extractor now properly takes the input stream given to it
- The Vamp-IR extractor function now properly accepts null streams
** Internal Changes
- A maybe function now exists generically throughout the codebase,
  allowing one to maybe any object type. See Maybe in the Generics
  section of the documentation.
* 0.3.1
** Bug Fixes
- Lambda to geb should now work, we fixed a bug with how case was
  translated, and created some tests
* 0.3.0
** User Facing Changes
- _Lambda Changes_
  1. Types are no longer required on all terms
  2. Application and Lambda now take multiple arguments, and expect
     arguments uncurried
- _Core Category Changes_
  + Opaque types now extend the core category
- An interpreter now can be used from any category of the codebase
- Cleaner Code generation, through the new BITC backend.
** Bug Fixes
- Geb to Poly had a few bugs fixed in injection, and pair
  representations
- Geb no longer exhausts the stack when trying to generate out
  vampir for basic circuits.
** Internal Changes
- Reference extensions allow factoring out common parts, not used
  outside of poly.
- _We now have the following generic modules_
  1. =GEB.GENERICS= - which hosts all generic transformations
  2. =GEB.EXTENSION= - which holds all extensions
- We have streamlined the package loading order.
* 0.2.0
- Change the graphing from a box and line diagram, to a proper graph diagram.
  + We now utilize clim-dot to draw the graph.
- The drawing algorithm improved, new algorithms to optimize the
  graphing diagram.
- Change design of the codebase to use mixin based extension to the
  core category instead of extending substmorph/substobj.
- Removed the alias tag, instead it's now stored on each separate
  allocation!
- _Fixups_
  + Vamp-IR name dumping when using CL variable name convention
    ignores *'s.
  + Minor issue with the docs on unresolved references and unneeded
    aliases preventing stock SBCL from loading the codebase.
* 0.1.1-alpha
- Fixup Vamp-IR library dump, by having range generate proper code.
* 0.1.0-alpha
- First release
* Next
