{-# OPTIONS --with-K --exact-split --cumulativity #-}
 
open import Agda.Primitive using (Level; lzero; lsuc; _‚äî_; Setœâ)

module exp where

  open import geb
  import HoTT
  open HoTT.Basics

  GF-obj : ObjGEBCat ‚Üí (Type lzero)
  GF-obj Init = ùüò
  GF-obj Term = ùüô
  GF-obj (x ‚äïG y) = (GF-obj x) + GF-obj y
  GF-obj (x ‚äóG y) = (GF-obj x) √ó (GF-obj y)

  GF-mor : {x y : ObjGEBCat} ‚Üí (x ‚Ü¶ y) ‚Üí ((GF-obj x) ‚Üí (GF-obj y))
  GF-mor (f ‚óè g) = GF-mor f ‚àò GF-mor g
  GF-mor (IdMor _) = id _
  GF-mor (InitMor _) = Œª { ()}
  GF-mor (TermMor _) = Œª x‚ÇÅ ‚Üí pt
  GF-mor (CoProdMor f g) = [ (GF-mor f) , (GF-mor g) ]
  GF-mor (ProdMor f g) = < (GF-mor f) , (GF-mor g) >
  GF-mor DistribMor = proj‚ÇÅ (√ó-hom-distrib-over-+ _ _ _)
  GF-mor inlG = inl
  GF-mor inrG = inr
  GF-mor p1G = pr‚ÇÅ
  GF-mor p2G = pr‚ÇÇ

  exp-fun : {x y : ObjGEBCat} ‚Üí (GF-obj (InHom x y)) ‚Üí ((GF-obj x) ‚Üí (GF-obj y))
  exp-fun {Init} {y} pt ()
  exp-fun {Term} {y} = Œª x x‚ÇÅ ‚Üí x
  exp-fun {x ‚äïG y} {z} (f , g) (inl GFx) = (exp-fun f) GFx
  exp-fun {x ‚äïG y} {z} (f , g) (inr GFy) = exp-fun g GFy
  exp-fun {x ‚äóG y} {z} f (xx , yy) = exp-fun ((exp-fun f) xx) yy

  exp-fun-eq : {x y : ObjGEBCat} ‚Üí is-an-equiv (exp-fun {x} {y})
  exp-fun-eq {Init} {y} = ((Œª x ‚Üí pt) ,, ( Œª x ‚Üí funext _ _ Œª { ()}))
                                           ,
                          ( ((Œª x ‚Üí pt) ,, Œª x ‚Üí is-Contr-then-is-Prop ùüô ùüô-is-Contr _ _))
  exp-fun-eq {Term} {y} = (((Œª f ‚Üí f pt) ,, Œª f ‚Üí funext _ _ Œª x ‚Üí fun-ap f (is-Contr-then-is-Prop ùüô ùüô-is-Contr _ _))
                                       ,
                          ( (Œª f ‚Üí f pt) ,, Œª f ‚Üí refl _))
  exp-fun-eq (x ‚äóG y) z = ((Œª (f : (GF-obj x √ó GF-obj y ‚Üí GF-obj z)) ‚Üí (proj‚ÇÅ (pr‚ÇÅ (exp-fun-eq x (InHom y z))))
                                  ((proj‚ÇÅ (pr‚ÇÅ (exp-fun-eq y z)))  ‚àò (curry {lzero} {lzero} {lzero} f)))
                                  ,, Œª (f : (GF-obj x √ó GF-obj y ‚Üí GF-obj z) )
                                           ‚Üí funext _ _
                                                   Œª {(xx , yy) ‚Üí transp
                                                                    (Œª k ‚Üí
                                                                       exp-fun y z
                                                                       (exp-fun x (InHom y z)
                                                                        (proj‚ÇÅ (pr‚ÇÅ (exp-fun-eq x (InHom y z)))
                                                                         (Œª x‚ÇÅ ‚Üí proj‚ÇÅ (pr‚ÇÅ (exp-fun-eq y z)) (Œª b ‚Üí f (x‚ÇÅ , b))))
                                                                        xx)
                                                                       yy
                                                                       ‚â°
                                                                       exp-fun y z
                                                                       (k (Œª x‚ÇÅ ‚Üí proj‚ÇÅ (pr‚ÇÅ (exp-fun-eq y z)) (Œª b ‚Üí f (x‚ÇÅ , b))) xx) yy)
                                                                    (funext _ _ (proj‚ÇÇ (pr‚ÇÅ (exp-fun-eq x (InHom y z))))) (refl _)
                                                                  ¬∑ transp (Œª k ‚Üí (k (Œª b ‚Üí f (xx , b)) yy) ‚â° f (xx , yy))
                                                                    (funext _ _ (hom-sym _ _ (proj‚ÇÇ (pr‚ÇÅ (exp-fun-eq y z))))) (refl _)})
                             ,
                             ((Œª f ‚Üí  (proj‚ÇÅ (pr‚ÇÇ (exp-fun-eq x (InHom y z))))
                                  ((proj‚ÇÅ (pr‚ÇÇ (exp-fun-eq y z)))  ‚àò (curry {lzero} {lzero} {lzero} f)))
                                 ,, Œª (f : (GF-obj (InHom x (InHom y z)))) ‚Üí
                                            transp
                                              (Œª k ‚Üí
                                                 proj‚ÇÅ (pr‚ÇÇ (exp-fun-eq x (InHom y z)))
                                                 (Œª x‚ÇÅ ‚Üí
                                                    proj‚ÇÅ (pr‚ÇÇ (exp-fun-eq y z))
                                                    (Œª b ‚Üí exp-fun y z (exp-fun x (InHom y z) f x‚ÇÅ) b))
                                                 ‚â° proj‚ÇÅ (pr‚ÇÇ (exp-fun-eq x (InHom y z))) (Œª x‚ÇÅ ‚Üí  k (exp-fun x (InHom y z) f x‚ÇÅ)))
                                              (funext _ _ (proj‚ÇÇ (pr‚ÇÇ (exp-fun-eq y z)))) (refl _)
                                            ¬∑ (proj‚ÇÇ (pr‚ÇÇ (exp-fun-eq x (InHom y z)))) f)

  eval-iso : (x y : ObjGEBCat) ‚Üí (GF-mor (evalG x y)) ‚àº (((Œª (fx : (((GF-obj x) ‚Üí (GF-obj y)) √ó (GF-obj x))) ‚Üí (pr‚ÇÅ fx) (pr‚ÇÇ fx) )) ‚àò ( (exp-fun x y) √ófun (id (GF-obj x))))
  eval-iso Init y = Œª { (x , ())}
  eval-iso Term y (f , x) = refl _
  eval-iso (x ‚äïG y) z ((f , g) , inl xx) = eval-iso _ _ ((f , xx))
  eval-iso (x ‚äïG y) z ((f , g) , inr yy) = eval-iso _ _ (g , yy)
  eval-iso (x ‚äóG y) z (f , (xx , yy)) = transp
                                          (Œª k ‚Üí
                                             GF-mor (evalG y z) (GF-mor (evalG x (InHom y z)) (f , xx) , yy) ‚â°
                                             GF-mor (evalG y z) (k , yy))
                                          (eval-iso x (InHom y z) ((f , xx))) (refl _)
                                          ¬∑ eval-iso y z (exp-fun x (InHom y z) f xx , yy)

  

  curry-iso : (x y z : ObjGEBCat) (f : (x ‚äóG y) ‚Ü¶ z) ‚Üí (exp-fun y z ‚àò (GF-mor (ŒªG x y z f))) ‚àº (curry (GF-mor f))
  curry-iso x Init z f xx = ùüò-fun-Prop _ _
  curry-iso x Term z f xx = funext _ _ Œª {pt ‚Üí refl _}
  curry-iso x (y1 ‚äïG y2) z f xx = funext _ _ Œª { (inl yy1) ‚Üí transp (Œª k ‚Üí k yy1 ‚â° GF-mor f (xx , inl yy1))
                                                                    ((curry-iso x y1 z _ xx) ‚Åª¬π) (refl _)
                                                 ;
                                                  (inr yy2) ‚Üí transp (Œª k ‚Üí k yy2 ‚â° GF-mor f (xx , inr yy2))
                                                                     ((curry-iso x y2 z _ xx) ‚Åª¬π) (refl _) } 
  curry-iso x (y1 ‚äóG y2) z f xx = funext _ _ Œª {(yy1 , yy2) ‚Üí transp (Œª k1 ‚Üí exp-fun y2 z k1 yy2 ‚â° GF-mor f (xx , (yy1 , yy2)))
                                                                (fun-ap (Œª k ‚Üí k yy1) (curry-iso x y1 (InHom y2 z) _ xx) ‚Åª¬π)
                                                                (transp (Œª k2 ‚Üí k2 yy2 ‚â° GF-mor f (xx , (yy1 , yy2)))
                                                                        ((curry-iso (x ‚äóG y1) y2 z _ ((xx , yy1))) ‚Åª¬π) (refl _)) }
