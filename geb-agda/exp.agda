{-# OPTIONS --with-K --exact-split --cumulativity #-}
 
open import Agda.Primitive using (Level; lzero; lsuc; _‚äî_; Setœâ)

module exp where

  open import geb
  import HoTT
  open HoTT.Basics

  GF-obj : ObjGEBCat ‚Üí (Type lzero)
  GF-obj Init = ùüò
  GF-obj Term = ùüô
  GF-obj (x ‚äïG y) = (GF-obj x) + GF-obj y
  GF-obj (x ‚äóG y) = (GF-obj x) √ó (GF-obj y)

  GF-mor : {x y : ObjGEBCat} ‚Üí (x ‚Ü¶ y) ‚Üí ((GF-obj x) ‚Üí (GF-obj y))
  GF-mor (f ‚óè g) = GF-mor f ‚àò GF-mor g
  GF-mor (IdMor _) = id _
  GF-mor (InitMor _) = Œª { ()}
  GF-mor (TermMor _) = Œª x‚ÇÅ ‚Üí pt
  GF-mor (CoProdMor f g) = [ (GF-mor f) , (GF-mor g) ]
  GF-mor (ProdMor f g) = < (GF-mor f) , (GF-mor g) >
  GF-mor DistribMor = proj‚ÇÅ (√ó-hom-distrib-over-+ _ _ _)
  GF-mor inlG = inl
  GF-mor inrG = inr
  GF-mor p1G = pr‚ÇÅ
  GF-mor p2G = pr‚ÇÇ

  exp-fun : {x y : ObjGEBCat} ‚Üí (GF-obj (InHom x y)) ‚Üí ((GF-obj x) ‚Üí (GF-obj y))
  exp-fun {Init} {y} pt ()
  exp-fun {Term} {y} = Œª x x‚ÇÅ ‚Üí x
  exp-fun {x ‚äïG y} {z} (f , g) (inl GFx) = (exp-fun f) GFx
  exp-fun {x ‚äïG y} {z} (f , g) (inr GFy) = exp-fun g GFy
  exp-fun {x ‚äóG y} {z} f (xx , yy) = exp-fun ((exp-fun f) xx) yy

  exp-fun-eq : {x y : ObjGEBCat} ‚Üí is-an-equiv (exp-fun {x} {y})
  exp-fun-eq {Init} {y} = ((Œª x ‚Üí pt) ,, ( Œª x ‚Üí funext _ _ Œª { ()}))
                                           ,
                          ( ((Œª x ‚Üí pt) ,, Œª x ‚Üí is-Contr-then-is-Prop ùüô ùüô-is-Contr _ _))
  exp-fun-eq {Term} {y} = (((Œª f ‚Üí f pt) ,, Œª f ‚Üí funext _ _ Œª x ‚Üí fun-ap f (is-Contr-then-is-Prop ùüô ùüô-is-Contr _ _))
                                       ,
                          ( (Œª f ‚Üí f pt) ,, Œª f ‚Üí refl _))
  exp-fun-eq (x ‚äïG y) z = ((Œª f ‚Üí ((proj‚ÇÅ (pr‚ÇÅ (exp-fun-eq x z))) (Œª x ‚Üí f (inl x)))
                                     , (proj‚ÇÅ (pr‚ÇÅ (exp-fun-eq y z))) (Œª y ‚Üí f (inr y)))
                                                             ,, Œª f ‚Üí funext _ _ Œª { (inl x) ‚Üí transp (Œª f' ‚Üí (exp-fun _ _ (proj‚ÇÅ (pr‚ÇÅ (exp-fun-eq _ _ )) (Œª x‚ÇÇ ‚Üí f (inl x‚ÇÇ)))) x ‚â° (f' x))
                                                                                                      ((proj‚ÇÇ (pr‚ÇÅ (exp-fun-eq _ _))) (Œª x‚ÇÇ ‚Üí f (inl x‚ÇÇ))) (refl _) 
                                                                                   ; (inr y) ‚Üí transp (Œª f' ‚Üí (exp-fun _ _ (proj‚ÇÅ (pr‚ÇÅ (exp-fun-eq _ _ )) (Œª y‚ÇÅ ‚Üí f (inr y‚ÇÅ)))) y ‚â° (f' y))
                                                                                                      ((proj‚ÇÇ (pr‚ÇÅ (exp-fun-eq _ _))) (Œª y‚ÇÇ ‚Üí f (inr y‚ÇÇ))) (refl _) })
                             ,
                             ((Œª f ‚Üí ((proj‚ÇÅ (pr‚ÇÇ (exp-fun-eq x z))) (Œª x ‚Üí f (inl x))) 
                                     , (proj‚ÇÅ (pr‚ÇÇ (exp-fun-eq y z))) (Œª y ‚Üí f (inr y)))
                                                            ,, Œª {(f' , g') ‚Üí prod-id-to-√ó-id _ _
                                                                             ((proj‚ÇÇ (pr‚ÇÇ (exp-fun-eq x z))) f')
                                                                             ((proj‚ÇÇ (pr‚ÇÇ (exp-fun-eq y z))) g')})
  exp-fun-eq {x ‚äóG y} {z} = ?

  

